agg = ddply(seldata[!is.na(seldata$near_distance),], c('sid', 'cond', 'near', 'near_distance'), function(x) {
c(sel_med_rt=median(x$rt))
})
agg$near = factor(agg$near)
agg$near_distance = factor(agg$near_distance)
agg$sid = factor(agg$sid)
desc.sel_rt_overlap = ddply(agg, c('cond', 'near', 'near_distance'), function(x) {
c(mn=mean(x$sel_med_rt), sd=sd(x$sel_med_rt))
})
cis = CMCI(sel_med_rt ~ near_distance + near + cond, agg, grouping.var="sid")
cisdf = reshape2::melt(cis)
cisdf = plyr::rename(cisdf,c('value'='cmci'))
cisdf$near_distance = factor(cisdf$near_distance)
cisdf$near = factor(cisdf$near)
agg2 = dplyr::left_join(desc.sel_rt_overlap, cisdf)
agg2$Condition = agg2$cond
levels(agg2$Condition) = c('active', 'passive')
levels(agg2$near) = c('Selected far', 'Selected near')
pd = position_dodge(.3)
plt.sel_rt_overlap = ggplot(agg2) +
geom_line(aes(x=near_distance, y=mn, group=Condition, color=Condition, linetype=Condition), position=pd, color='black') +
geom_errorbar(aes(x=near_distance, ymin=mn-cmci, ymax=mn+cmci, group=Condition), color='black', width=0, position=pd) +
geom_point(aes(x=near_distance, y=mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
facet_wrap(~ near) +
scale_fill_manual(values=c('black', 'white')) +
scale_x_discrete("Distance of\nnear option") +
scale_y_continuous("median RT (ms)") +
ggtitle('Selection RT') +
theme_apa() +
theme(axis.text.x = element_text(size=9, angle = 45, hjust = 1),
axis.text=element_text(size=9),
axis.title.x = element_text(size=11, margin = margin(5,0,0,0)),
axis.title.y = element_text(size=11, margin = margin(0,5,0,0)),
plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.6,0, 'lines')),
legend.title = element_text(size=11),
legend.margin = margin(0,0,0,0),
panel.background = element_rect(fill = "white", colour = "grey20"),
strip.text.x = element_text(size=10, margin=margin(0.1, 0, 0.3, 0, "lines")),
strip.text.y = element_text(size=10, margin=margin(0, 0.2, 0, 0.6, "lines")))
leg = get_legend(plt.sel_rt_overlap)
prow = plot_grid(plt.prop_near_overlap + theme(legend.position='none'),
plt.sel_rt_overlap + theme(legend.position='none'),
axis='tl',
labels="AUTO", align='vh', rel_widths=c(1.3,2))
plt.overlap = plot_grid(prow, leg, rel_widths=c(3,.4))
# not finished yet...
model.sel_rt_overlap = lmer(sel_med_rt ~ near_distance*near*cond + (1|sid),
data=agg)
model.aov.sel_rt_overlap = anova(model.sel_rt_overlap)
#library(emmeans)
#emmeans(model.sel_rt_overlap, list(pairwise ~ near_distance*near*cond), adjust = "tukey")
# active_neg2 = c(1,0,0,0,0,0,0,0)
# active_neg1 = c(1,1,0,0,0,0,0,0)
# active_pos1 = c(1,0,1,0,0,0,0,0)
# active_pos2 = c(1,0,0,1,0,0,0,0)
# yoked_neg2  = c(1,0,0,0,1,0,0,0)
# yoked_neg1  = c(1,1,0,0,1,1,0,0)
# yoked_pos1  = c(1,0,1,0,1,0,1,0)
# yoked_pos2  = c(1,0,0,1,1,0,0,1)
#
# contr = rbind("pos1 - neg2 | active" = active_pos1 - active_neg2,
#               "pos1 - neg1 | active" = active_pos1 - active_neg1,
#               "pos1 - pos2 | active" = active_pos1 - active_pos2,
#               "pos1 - neg2 | yoked"  = yoked_pos1 - yoked_neg2,
#               "pos1 - neg1 | yoked"  = yoked_pos1 - yoked_neg1,
#               "pos1 - pos2 | yoked"  = yoked_pos1 - yoked_pos2)
# mc.sel_rt_overlap = summary(glht(model.sel_rt_overlap, linfct=contr),
#                        test=adjusted('none'))
#
#
# glht(model.sel_rt_overlap, linfct = mcp(near = "Tukey"))
# agg = ddply(seldata[!is.na(seldata$near_distance),], c('sid', 'cond', 'near_distance'), function(x) {
#   c(sel_med_rt=median(x$rt))
# })
# agg$near_distance = factor(agg$near_distance)
# agg$sid = factor(agg$sid)
#
# desc.sel_rt_overlap = ddply(agg, c('cond', 'near_distance'), function(x) {
#   c(mn=mean(x$sel_med_rt), sd=sd(x$sel_med_rt))
# })
#
# cis = CMCI(sel_med_rt ~ near_distance + cond, agg, grouping.var="sid")
# cisdf = reshape2::melt(cis)
# cisdf = plyr::rename(cisdf,c('value'='cmci'))
# cisdf$near_distance = factor(cisdf$near_distance)
#
# agg2 = dplyr::left_join(desc.sel_rt_overlap, cisdf)
# agg2$Condition = agg2$cond
# levels(agg2$Condition) = c('active', 'passive')
#
# pd = position_dodge(.3)
#
# plt.sel_rt_overlap = ggplot(agg2) +
#   geom_line(aes(x=near_distance, y=mn, group=Condition, color=Condition, linetype=Condition), position=pd, color='black') +
#   geom_errorbar(aes(x=near_distance, ymin=mn-cmci, ymax=mn+cmci, group=Condition), color='black', width=0, position=pd) +
#   geom_point(aes(x=near_distance, y=mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
#   scale_fill_manual(values=c('black', 'white')) +
#   scale_x_discrete("Distance of\nnear option") +
#   scale_y_continuous("median RT (ms)") +
#   ggtitle('Selection RT') +
#   theme_apa() +
#   theme(aspect.ratio=1.2,
#         axis.text.x = element_text(size=9, angle = 45, hjust = 1),
#         axis.text=element_text(size=9),
#         plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.4,0, 'lines')),
#         panel.background = element_rect(fill = "white", colour = "grey20"))
#
#
# leg = get_legend(plt.prop_near_overlap)
#
# prow = plot_grid(plt.prop_near_overlap + theme(legend.position='none'),
#                  plt.sel_rt_overlap + theme(legend.position='none'),
#                  labels="AUTO", align='vh')
#
# plt.overlap = plot_grid(prow, leg, rel_widths=c(3,.6))
# active_neg2 = c(1,0,0,0,0,0,0,0)
# active_neg1 = c(1,1,0,0,0,0,0,0)
# active_pos1 = c(1,0,1,0,0,0,0,0)
# active_pos2 = c(1,0,0,1,0,0,0,0)
# yoked_neg2  = c(1,0,0,0,1,0,0,0)
# yoked_neg1  = c(1,1,0,0,1,1,0,0)
# yoked_pos1  = c(1,0,1,0,1,0,1,0)
# yoked_pos2  = c(1,0,0,1,1,0,0,1)
#
#
# # not finished yet...
# model.sel_rt_overlap = lmer(sel_med_rt ~ near_distance*cond + (1|sid),
#      data=agg)
# contr = rbind("pos1 - neg2 | active" = active_pos1 - active_neg2,
#               "pos1 - neg1 | active" = active_pos1 - active_neg1,
#               "pos1 - pos2 | active" = active_pos1 - active_pos2,
#               "pos1 - neg2 | yoked"  = yoked_pos1 - yoked_neg2,
#               "pos1 - neg1 | yoked"  = yoked_pos1 - yoked_neg1,
#               "pos1 - pos2 | yoked"  = yoked_pos1 - yoked_pos2)
# mc.sel_rt_overlap = summary(glht(model.sel_rt_overlap, linfct=contr),
#                        test=adjusted('none'))
# Test performance: Endpoints only -----
testdata = data[data$endpoint==T,]
agg = ddply(testdata, c('session', 'cond', 'sid'), function(x) {
c(acc=mean(as.numeric(x$correct)-1))
})
desc.acc_endpoint = ddply(agg, c('session', 'cond'), function(x) {
c(mn=mean(x$acc),
sd=sd(x$acc))
})
model.acc_endpoint = glmer(correct ~
session*cond +
sc.ospan_fta*cond +
sc.distance_bin*cond +
(1|sid) + (1|pair_id),
data=testdata, family='binomial',
control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=2e5)))
summary(model.acc_endpoint)
fe.acc_endpoint = exp(fixef(model.acc_endpoint))
fe.acc_endpoint = merge(fe.acc_endpoint, exp(ci.acc_endpoint[names(fe.acc_endpoint),]), by='row.names')
names(fe.acc_endpoint) = c('Predictor', 'OR', '95% CI-lower', '95% CI-upper')
fe.acc_endpoint$Predictor = c('(Intercept)',
'Condition [yoked]', 'Condition [yoked] x Distance',
'Condition [yoked] x Operation span',
'Distance', 'Operation span', 'Session [retest]',
'Condition [yoked] x Session [retest]')
neworder = c('(Intercept)',
'Condition [yoked]', 'Session [retest]', 'Distance', 'Operation span',
'Condition [yoked] x Session [retest]', 'Condition [yoked] x Distance',
'Condition [yoked] x Operation span')
fe.acc_endpoint = fe.acc_endpoint[with(fe.acc_endpoint, match(neworder, Predictor)),]
ef_active_test     = c(0, 0, -1, 0, 0, 0, 0, 0)
ef_active_retest   = c(0, 0, -1, 0, 0, -1, 0, 0)
ef_retest_active   = c(0, 1, 0, 0, 0, 0, 0, 0)
ef_retest_yoked    = c(0, 1, 0, 0, 0, 1, 0, 0)
ef_distance_active = c(0, 0, 0, 0, 1, 0, 0, 0)
ef_distance_yoked  = c(0, 0, 0, 0, 1, 0, 0, 1)
ef_ospan_active    = c(0, 0, 0, 1, 0, 0, 0, 0)
ef_ospan_yoked     = c(0, 0, 0, 1, 0, 0, 1, 0)
# contrast at each distance
dists = unique(data$sc.distance_bin)
ef_active_test_d1  = c(0, 0, -1, 0, 0, 0, 0, -dists[1])
ef_active_test_d2  = c(0, 0, -1, 0, 0, 0, 0, -dists[2])
ef_active_test_d3  = c(0, 0, -1, 0, 0, 0, 0, -dists[3])
ef_active_retest_d1  = c(0, 0, -1, 0, 0, -1, 0, -dists[1])
ef_active_retest_d2  = c(0, 0, -1, 0, 0, -1, 0, -dists[2])
ef_active_retest_d3  = c(0, 0, -1, 0, 0, -1, 0, -dists[3])
contr = rbind("active - yoked | test" = ef_active_test,
"active - yoked | retest" = ef_active_retest,
"active - yoked | test, d1" = ef_active_test_d1,
"active - yoked | test, d2" = ef_active_test_d2,
"active - yoked | test, d3" = ef_active_test_d3,
"active - yoked | retest, d1" = ef_active_retest_d1,
"active - yoked | retest, d2" = ef_active_retest_d2,
"active - yoked | retest, d3" = ef_active_retest_d3,
"test - retest | active" = ef_retest_active,
"test - retest | yoked" = ef_retest_yoked,
"distance | active" = ef_distance_active,
"distance | yoked" = ef_distance_yoked,
"ospan | active" = ef_ospan_active,
"ospan | yoked" = ef_ospan_yoked)
mc.acc_endpoint = summary(glht(model.acc_endpoint, linfct=contr),
test=adjusted('none'))
OR.acc_endpoint = exp(confint(mc.acc_endpoint)$confint)
# Test performance: Excluding endpoints -----
testdata = data[data$endpoint==F,]
agg = ddply(testdata, c('session', 'cond', 'sid'), function(x) {
c(acc=mean(as.numeric(x$correct)-1))
})
desc.acc = ddply(agg, c('session', 'cond'), function(x) {
c(mn=mean(x$acc),
sd=sd(x$acc))
})
model.acc = glmer(correct ~
session*cond +
sc.ospan_fta*cond +
sc.distance_bin*cond +
(1|sid) + (1|pair_id),
data=testdata, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(model.acc)
#eff = effect('sc.ospan_fta', model.acc, partial.residuals=T)
fe.acc = exp(fixef(model.acc))
fe.acc = merge(fe.acc, exp(ci.acc[names(fe.acc),]), by='row.names')
names(fe.acc) = c('Predictor', 'OR', '95% CI-lower', '95% CI-upper')
fe.acc$Predictor = c('(Intercept)',
'Condition [yoked]', 'Condition [yoked] x Distance',
'Condition [yoked] x Operation span',
'Distance', 'Operation span', 'Session [retest]',
'Condition [yoked] x Session [retest]')
neworder = c('(Intercept)',
'Condition [yoked]', 'Session [retest]', 'Distance', 'Operation span',
'Condition [yoked] x Session [retest]', 'Condition [yoked] x Distance',
'Condition [yoked] x Operation span')
fe.acc = fe.acc[with(fe.acc, match(neworder, Predictor)),]
ef_active_test     = c(0, 0, -1, 0, 0, 0, 0, 0)
ef_active_retest   = c(0, 0, -1, 0, 0, -1, 0, 0)
ef_retest_active   = c(0, 1, 0, 0, 0, 0, 0, 0)
ef_retest_yoked    = c(0, 1, 0, 0, 0, 1, 0, 0)
ef_distance_active = c(0, 0, 0, 0, 1, 0, 0, 0)
ef_distance_yoked  = c(0, 0, 0, 0, 1, 0, 0, 1)
ef_ospan_active    = c(0, 0, 0, 1, 0, 0, 0, 0)
ef_ospan_yoked     = c(0, 0, 0, 1, 0, 0, 1, 0)
# contrast at each distance
dists = unique(data$sc.distance_bin)
ef_active_test_d1  = c(0, 0, -1, 0, 0, 0, 0, -dists[1])
ef_active_test_d2  = c(0, 0, -1, 0, 0, 0, 0, -dists[2])
ef_active_test_d3  = c(0, 0, -1, 0, 0, 0, 0, -dists[3])
ef_active_retest_d1  = c(0, 0, -1, 0, 0, -1, 0, -dists[1])
ef_active_retest_d2  = c(0, 0, -1, 0, 0, -1, 0, -dists[2])
ef_active_retest_d3  = c(0, 0, -1, 0, 0, -1, 0, -dists[3])
contr = rbind("active - yoked | test" = ef_active_test,
"active - yoked | retest" = ef_active_retest,
"active - yoked | test, d1" = ef_active_test_d1,
"active - yoked | test, d2" = ef_active_test_d2,
"active - yoked | test, d3" = ef_active_test_d3,
"active - yoked | retest, d1" = ef_active_retest_d1,
"active - yoked | retest, d2" = ef_active_retest_d2,
"active - yoked | retest, d3" = ef_active_retest_d3,
"test - retest | active" = ef_retest_active,
"test - retest | yoked" = ef_retest_yoked,
"distance | active" = ef_distance_active,
"distance | yoked" = ef_distance_yoked,
"ospan | active" = ef_ospan_active,
"ospan | yoked" = ef_ospan_yoked)
mc.acc = summary(glht(model.acc, linfct=contr),
test=adjusted('none'))
OR.acc = exp(confint(mc.acc)$confint)
# plot of performance after median split
td = data
agg = ddply(td, c('sid', 'ospan_bin', 'session', 'cond', 'distance_bin'), function(x) {
c(acc=mean(x$correct==1))
})
agg = ddply(agg, c('ospan_bin', 'session', 'cond', 'distance_bin'), function(x) {
c(acc.mn=mean(x$acc), acc.sd=sd(x$acc))
})
#library(reshape2)
#library(tidyverse)
td = testdata
td$correct = as.numeric(td$correct)
cis = CMCI(correct ~ cond*session + cond*distance_bin + ospan_bin, td, grouping.var="sid")
cisdf = reshape2::melt(cis)
cisdf = plyr::rename(cisdf,c('value'='cmci'))
agg = dplyr::left_join(agg, cisdf)
agg$distance_bin = factor(agg$distance_bin, labels=c('recall', 'near inference', 'far inference'))
agg$Condition = agg$cond
agg$session = factor(agg$session, labels=c('Test', 'Retest'))
agg$ospan_bin = factor(agg$ospan_bin, labels=c('Low WMC', 'High WMC'))
levels(agg$Condition) = c('active', 'passive')
pd = position_dodge(.3)
plt.acc = ggplot(data=agg) +
geom_errorbar(aes(x=factor(distance_bin), ymin=acc.mn-cmci, ymax=acc.mn+cmci, group=Condition), color='black', width=0, position=pd) +
geom_line(aes(x=factor(distance_bin), y=acc.mn, group=Condition, linetype=Condition), position=pd, color='black') +
geom_point(aes(x=distance_bin, y=acc.mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
scale_fill_manual(values=c('black', 'white')) +
facet_wrap(~ ospan_bin + session, ncol=4) +
scale_x_discrete("Distance") +
scale_y_continuous("% correct") +
ggtitle('Test accuracy') +
theme_apa() +
theme(aspect.ratio=1.5,
axis.text.x = element_text(size=9, angle = 45, hjust = 1),
axis.text=element_text(size=9),
plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.4,0, 'lines')),
plot.margin = unit(c(1, .5, 1, 0.5), "lines"),
panel.background = element_rect(fill = "white", colour = "grey20"),
panel.spacing = unit(.2,'cm'),
legend.margin = margin(0,0,0,0),
legend.title = element_text(size=11),
strip.text.x = element_text(size=10, margin=margin(0.1, 0, 0.3, 0, "lines")),
strip.text.y = element_text(size=10, margin=margin(0, 0.2, 0, 0.6, "lines")))
# add selection RT to the model
#model.acc_sel_rt = update(model.acc, . ~ . + sc.sel_med_rt)
#ef_sel_rt_active    = c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
#ef_sel_rt_yoked     = c(0, 0, 0, 0, 0, 1, 0, 0, 0, 1)
#contr = rbind("sel_rt | active" = ef_sel_rt_active,
#              "sel_rt | yoked" = ef_sel_rt_yoked)
#mc.sel_rt = summary(glht(model.sel_rt, linfct=contr),
#                       test=adjusted('none'))
# Proportion near -----
# agg = ddply(testdata, c('sid', 'cond', 'sel_prop_near', 'sel_prop_near_when_nonoverlap','sel_prop_near_when_overlap_feedback','sel_prop_near_when_overlap_nonfeedback', 'ospan_fta'), function(x) {
#   c(acc=mean(x$correct==1))
# })
#
#
activedata = testdata[testdata$cond=='active',]
model.acc_active = glmer(correct ~
session +
sc.ospan_fta +
sc.distance_bin +
sc.prop_near_neg2 +
sc.prop_near_neg1 +
sc.prop_near_pos1 +
sc.prop_near_pos2 +
(1|sid) + (1|pair_id),
data=activedata, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(model.acc_active)
contr = rbind("prop_near_neg2" = c(0,0,0,0,1,0,0,0),
"prop_near_neg1" = c(0,0,0,0,0,1,0,0),
"prop_near_pos1" = c(0,0,0,0,0,0,1,0),
"prop_near_pos2" = c(0,0,0,0,0,0,0,1))
mc.acc_active = summary(glht(model.acc_active, linfct=contr),
test=adjusted('none'))
OR.acc_active = exp(confint(mc.acc_active)$confint)
# Response time during test -----
agg = ddply(testdata, c('sid', 'distance_bin',
'sc.ospan_fta', 'session', 'cond', 'sc.distance_bin'), function(x) {
c(med_rt=median(x$rt))
})
agg$distance_bin = factor(agg$distance_bin, labels=c('recall', 'near inference', 'far inference'))
desc.rt = ddply(agg, c('session', 'cond'), function(x) {
c(mn=round(mean(x$med_rt)),
sd=round(sd(x$med_rt)))
})
model.rt = lmer(med_rt ~
session*cond*sc.distance_bin +
sc.ospan_fta*cond + (1|sid),
data=agg)
summary(model.rt)
ef_active.test            = c(0, 0, -1,0, 0, 0, 0, 0, 0, 0)
ef_active.retest          = c(0, 0, -1,0, 0,-1, 0, 0, 0, 0)
ef_retest_active          = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0)
ef_retest_yoked           = c(0, 1, 0, 0, 0, 1, 0, 0, 0, 0)
ef_distance.active_test   = c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0)
ef_distance.active_retest = c(0, 0, 0, 1, 0, 0, 1, 0, 0, 0)
ef_distance.yoked_test    = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0)
ef_distance.yoked_retest  = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 1)
ef_ospan_active           = c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
ef_ospan_yoked            = c(0, 0, 0, 0, 1, 0, 0, 0, 1, 0)
contr = rbind("active - yoked | test" = ef_active.test,
"active - yoked | retest" = ef_active.retest,
"test - retest | active" = ef_retest_active,
"test - retest | yoked" = ef_retest_yoked,
"distance | active, test" = ef_distance.active_test,
"distance | active, retest" = ef_distance.active_retest,
"distance | yoked, test" = ef_distance.yoked_test,
"distance | yoked, retest" = ef_distance.yoked_retest,
"ospan | active" = ef_ospan_active,
"ospan | yoked" = ef_ospan_yoked)
mc.rt = summary(glht(model.rt, linfct=contr),
test=adjusted('none'))
cis = CMCI(med_rt ~ distance_bin + cond + session, agg, grouping.var="sid")
cisdf = reshape2::melt(cis)
cisdf = plyr::rename(cisdf,c('value'='cmci'))
agg2 = ddply(agg, c('session', 'cond', 'distance_bin'), function(x) {
c(mn=mean(x$med_rt))
})
agg2 = dplyr::left_join(agg2, cisdf)
agg2$Condition = agg2$cond
levels(agg2$Condition) = c('active', 'passive')
agg2$session = factor(agg2$session, labels=c('Test', 'Retest'))
#agg2$ospan_bin = factor(agg2$ospan_bin, labels=c('Low WM', 'High WM'))
pd = position_dodge(.3)
plt.rt = ggplot(data=agg2) +
geom_errorbar(aes(x=distance_bin, ymin=mn-cmci, ymax=mn+cmci, group=Condition), color='black', width=0, position=pd) +
geom_line(aes(x=factor(distance_bin), y=mn, group=Condition, linetype=Condition), position=pd, color='black') +
geom_point(aes(x=distance_bin, y=mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
scale_fill_manual(values=c('black', 'white')) +
facet_wrap(~ session, ncol=4) +
scale_x_discrete("Distance") +
scale_y_continuous("Median RT (ms)") +
ggtitle('Test RT') +
theme_apa() +
theme(aspect.ratio=1.5,
axis.text.x = element_text(size=9, angle = 45, hjust = 1),
axis.text=element_text(size=9),
plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.4,0, 'lines')),
plot.margin = unit(c(1, .5, 1, 0.5), "lines"),
panel.background = element_rect(fill = "white", colour = "grey20"),
panel.spacing = unit(.2,'cm'),
legend.margin = margin(0,0,0,0),
legend.title = element_text(size=11),
strip.text.x = element_text(size=10, margin=margin(0.1, 0, 0.3, 0, "lines")),
strip.text.y = element_text(size=10, margin=margin(0, 0.2, 0, 0.6, "lines")))
setwd("~/studies/study_active_transitive_inference/analysis/")
ci.acc = confint(model.acc)
ci.acc_endpoint = confint(model.acc_endpoint)
ci.rt = confint(model.rt)
ci.acc
ci.acc_endpoint
ci.rt
save(ci.acc, ci.acc_endpoint, ci.rt, file = "confints.RData")
head(data)
max(data$trial)
head(model.acc)
model.acc
summary(model.acc)
head(data)
data[data$sid==42]
data[data$sid==42,]
summary(model.acc)
demodf
# Load data -----
data = read.csv('../data_proc/testdata.csv')
data = unite(data, 'pair_id', c('lower_id', 'higher_id'))
# for now, only participants with OSpan data
data = data[(!is.na(data$ospan_fta)),]
data$sid = factor(data$sid)
data$gender = factor(data$gender, labels=c('female', 'male'))
data$session = factor(data$session, labels=c('test', 'retest'))
data$cond = factor(data$cond)
data$stim_type = factor(data$stim_type)
data$correct = factor(data$correct)
data$block = factor(data$block)
data$endpoint = as.logical.factor(data$endpoint)
data$pair_id = factor(data$pair_id)
data$counterbalance = factor(data$counterbalance)
# rescale and center some variables for regression model
data$sc.distance = scale(data$distance)
data$sc.distance_bin = scale(data$distance_bin)
data$sc.ospan_fta = scale(data$ospan_fta)
data$sc.sel_med_rt = scale(data$sel_med_rt)
data$sc.sel_med_rt_overlap_feedback = scale(data$sel_med_rt_overlap_feedback)
data$sc.sel_med_rt_other = scale(data$sel_med_rt_other)
data$sc.prop_near = scale(data$sel_prop_near)
data$sc.prop_near_when_overlap = scale(data$sel_prop_near_when_overlap)
data$sc.prop_near_when_overlap_feedback = scale(data$sel_prop_near_when_overlap_feedback)
data$sc.prop_near_when_overlap_nonfeedback = scale(data$sel_prop_near_when_overlap_nonfeedback)
data$sc.prop_near_when_nonoverlap = scale(data$sel_prop_near_when_nonoverlap)
data$sc.prop_near_neg2 = scale(data$sel_prop_near_neg2)
data$sc.prop_near_neg1 = scale(data$sel_prop_near_neg1)
data$sc.prop_near_pos1 = scale(data$sel_prop_near_pos1)
data$sc.prop_near_pos2 = scale(data$sel_prop_near_pos2)
# Selection data
seldata = read.csv('../data_proc/selectiondata.csv')
seldata$sid = factor(seldata$sid)
seldata$gender = factor(seldata$gender, labels=c('female', 'male'))
seldata$cond = factor(seldata$cond)
seldata$stim_type = factor(seldata$stim_type)
seldata$selected_ind = factor(seldata$selected_ind)
seldata$sc.ospan_fta = scale(seldata$ospan_fta)
seldata$overlap_type = NaN
seldata[with(seldata, overlap=='False'),]$overlap_type = 0
seldata[with(seldata, (overlap=='True') & (overlap_feedback=='False')),]$overlap_type = 1
seldata[with(seldata, (overlap=='True') & (overlap_feedback=='True')),]$overlap_type = 2
# Sample -----
demodf = ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
demodf$gender = factor(demodf$gender, labels=c('female', 'male'))
demodf
summary(model.acc)
model.acc = glmer(correct ~
session*cond*sc.ospan_fta +
sc.distance_bin*cond +
(1|sid) + (1|pair_id),
data=testdata, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(model.acc)
agg = ddply(seldata[!is.na(seldata$near_distance),], c('sid', 'near_distance', 'cond'), function(x) {
c(n=nrow(x),
prop_near=sum(x$near==1)/nrow(x))
})
agg$sid = factor(agg$sid)
agg$near_distance = factor(agg$near_distance)
agg
agg[agg$near_distance==1,]
agg[agg$near_distance==1,]
with(agg, near_distance==1 & cond=='active',]
with(agg, (near_distance==1) & (cond=='active'),]
with(agg, (near_distance==1)]
with(agg, (near_distance==1))
agg[with(agg, (near_distance==1)),]
agg[with(agg, (near_distance==1) & (cond=='active')),]
ss = agg[with(agg, (near_distance==1) & (cond=='active')),]
ss$prop_near > .5
sum(ss$prop_near > .5)
sum(ss$prop_near > .6)
sum(ss$prop_near > .7)
sum(ss$prop_near > .8)
sum(ss$prop_near > .9)
sum(ss$prop_near > .4)
sum(ss$prop_near > .3)
sum(ss$prop_near > .5)
